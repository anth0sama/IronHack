// Rover Object Goes Here
// ======================

var firstRover = {
  position: [0,0],
  direction: 'N',
  name: "Rover1"
};

var secondRover = {
  position: [5,5],
  direction: 'N',
  name: "Rover2"
};

var grid = new Array(10);
for (i = 0; i < 10; i++) {
	grid[i] = new Array(10);
	for (j = 0; j < 10; j++) {
		grid[i][j] = "["+i+","+j+"]";
		}
}

let testBoard = [ 
  [null,null,null,null,"Rock2",null,null,null,null,null],
  [null,null,null,null,null,null,null,null,null,null],
  [null,null,null,"Rock1",null,null,null,null,null,null],
  [null,null,null,null,null,null,null,null,null,null],
  [null,null,null,null,null,null,null,null,null,null],
  [null,null,null,"Rock",null,null,null,null,null,null],
  [null,null,null,null,null,null,null,null,null,null],
  [null,"Rock3",null,null,null,null,null,null,null,null],
  [null,null,null,null,null,null,null,null,null,null],
  [null,null,null,null,null,null,null,null,null,null]
];
let obstaclesList = [];

for(let i = 0; i < testBoard.length; i++){
  for(let j = 0; j < testBoard[i].length; j++) {
    if(testBoard[i][j] !== null) {
      obstaclesList.push({x: j, y: i});
    }
  }
}

//===========================

  function turnLeft(rover) {
     console.log("turnLeft was called!"); 
  switch(rover.direction) {
    case 'N':
      rover.direction = 'W';
      break;
    case 'E':
      rover.direction = 'N';
      break;
    case 'S':
      rover.direction = 'E';
      break;
    case 'W':
      rover.direction = 'S';
      break;
  }}

function turnRight(rover) {
   console.log("turnRight was called!");
  switch(rover.direction) {
    case 'N':
      rover.direction = 'E';
      break;
    case 'E':
      rover.direction = 'S';
      break;
    case 'S':
      rover.direction = 'W';
      break;
    case 'W':
      rover.direction = 'N';
      break;
  }}
  
 //===========================

function moveForward (rover) {
    console.log("moveForward was called")
  switch(rover.direction) {
    case 'N':
      rover.position[1]++;
      if(rover.position[1]>9) rover.position[1] = 0;
      break;
    case 'E':
      rover.position[0]++;
      if(rover.position[0]>9) rover.position[0] = 0;
      break;
    case 'S':
      rover.position[1]--;
      if(rover.position[1]<0) rover.position[1] = 9;
      break;
    case 'W':
      rover.position[0]--;
      if(rover.position[0]<0) rover.position[0] = 9;
      break;
     }

for(let k = 0; k < obstaclesList.length; k++){
    if(rover.x === obstaclesList[k].x && rover.y === obstaclesList[k].y) {
      console.log("Obstacle was found! Stopping now!");
      throw Error("TEST");
      } 
  }
}

function backwards(rover) {
  console.log("backwards was called")
  switch(rover.direction) {
    case 'N':
      rover.position[1]--;
      if(rover.position[1]<0) rover.position[1] = 9;
      break;
    case 'E':
      rover.position[0]--;
      if(rover.position[0]<0) rover.position[0] = 9;
      break;
    case 'S':
      rover.position[1]++;
      if(rover.position[1]>9) rover.position[1] = 0;
      break;
    case 'W':
      rover.position[0]++;
      if(rover.position[0]>9) rover.position[0] = 0;
      break;
  }

  console.log(rover.name + " Rover Position: [" + rover.position[0] + ", " + rover.position[1] + "]");
}

function oops(movement) {
	if (rover.position[0] < 0 || rover.position[0] >= 10) {
		console.log('Oops! your reached the border, you cannot move' + movement);
		rover.position[0] = 0;
	}
	if (rover.position[1] < 0) {
		console.log('Oops! your reached the border, you cannot move' + movement);
		rover.position[1] = 0;
	} else {
		RegisterTravelLogMovement(rover);
	}
}

function RegisterTravelLogMovement(rover) {
	travelLog.push(
		'Rover moved Forward, Rovers position is: ' + rover.position
	);
}

function RegisterTravelLogTurn(rover) {
	travelLog.push(
		'Rover turned ' +
			turn +
			', now Rovers direction is: ' +
			rover.direction
	);
}

//===========================

function marsRover(rover, orders){
  for(var i = 0; i < orders.length; i++){
    var orderCode = orders[i];
    switch(orderCode){
      case 'f':
        moveForward(rover);
      break;
      case 'b':
        backwards(rover);
      break;
      case 'r':
        turnRight(rover);
      break;
      case 'l':
        turnLeft(rover);
      break;
      default : console.log('Invalid order');
      break;
    }
  }
}

var actualOrder = "fflfrbb";
marsRover(secondRover, actualOrder);

var actualOrder = "fllflfrb";
marsRover(firstRover, actualOrder);

//===========================
function travelLog(rover) {
  var travelLog = [];
  travelLog.push([rover.x,rover.y]);
  console.log(travelLog);
}
